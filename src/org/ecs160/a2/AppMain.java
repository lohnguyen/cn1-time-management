package org.ecs160.a2;


import static com.codename1.ui.CN.*;

import com.codename1.components.MultiButton;
import com.codename1.components.ToastBar;
import com.codename1.io.Data;
import com.codename1.ui.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.TextModeLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import com.codename1.ui.layouts.BoxLayout;

import javax.tools.Tool;
import java.io.IOException;
import java.lang.Object;
import java.util.ArrayList;
import java.util.List;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class AppMain {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error",
                    "There was a networking error in the connection to " +
                            err.getConnectionRequest().getUrl(), "OK",
                    null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }

        // TODO: Test, take out when done
        Database.init();
        //Database.test();

        Form hi = new Form("Task Management App", new BorderLayout());

        Toolbar toolbar = new Toolbar();
        hi.setToolbar(toolbar);
        toolbar.setTitle("Tasks");
        Button addTaskButton = new Button();

        try {
            addTaskButton.setIcon(Image.createImage("/addbutton.png").scaled(80,80));
        } catch (IOException e) {
            e.printStackTrace();
        }

        toolbar.addComponent(BorderLayout.EAST, addTaskButton);

        addTaskButton.addActionListener(e->showAddTaskDialog());

        final FontImage taskOn =
                FontImage.createMaterial(FontImage.MATERIAL_ALARM_ON, "Label"
                        , 6);

//        Container taskList = new InfiniteContainer() {
//            @Override
//            public Component[] fetchComponents(int index, int amount) {
//                Component[] allTasks = new Component[20];
//
//                for (int i = 0; i < allTasks.length; i++) {
//                    final int taskNum = i;
//                    MultiButton buttons = new MultiButton("Task " + taskNum);
//                    buttons.setTextLine2("details");
//                    FontImage.setMaterialIcon(buttons,
//                            FontImage.MATERIAL_ALARM_ON);
//                    buttons.addActionListener(ee ->
//                            ToastBar.showMessage("Clicked: " + taskNum,
//                                    FontImage.MATERIAL_ALARM_ON));
//                    allTasks[i] = buttons;
//                }
//
//                return allTasks;
//            }
//        };

        Tabs tabs = new Tabs();
        hi.add(BorderLayout.CENTER, tabs);
        //tabs.addTab("Tasks", taskOn, taskList);
        tabs.addTab("Tasks", BoxLayout.encloseXCenter(new Label("Tasks will show up here")));
        tabs.addTab("Summary", BoxLayout.encloseXCenter(new Label("Summary " +
                "and/or options will show up here.")));
        hi.show();
    }

    private void showAddTaskDialog() {
        Dialog addNewTaskDialog = new Dialog("New Task");
        addNewTaskDialog.setLayout(new BorderLayout());
        int h = Display.getInstance().getDisplayHeight();
        addNewTaskDialog.setDisposeWhenPointerOutOfBounds(true);
        displayTaskForm(addNewTaskDialog);
        addNewTaskDialog.show(h/4, 0, 0, 0);
    }

    private void displayTaskForm(Dialog addNewTaskDialog) {
        TextModeLayout textLayout = new TextModeLayout(3,2);
        Form newTaskForm = new Form("Enter Task Details", textLayout);

        TextComponent taskName = new TextComponent().label("Task Name");
        TextComponent taskTags = new TextComponent().label("Task Tags");

        // Sizes start -----------------------
        String[] sizes = {"None", "S", "M", "L", "XL"};
        MultiButton sizeButton = new MultiButton("Size");
        sizeButton.addActionListener(e->showSizePopup(sizes, sizeButton));
        // Sizes Stop -----------------------

        TextComponent taskDescription = new TextComponent().label("Description").multiline(true);

        newTaskForm.add(textLayout.createConstraint(), taskName);
        newTaskForm.add(sizeButton);
        newTaskForm.add(taskTags);
        newTaskForm.add(taskDescription);


        Button addTaskButton = new Button("Add Task");
        addTaskButton.addActionListener(e->addTaskIntoDatabase(addNewTaskDialog, taskName.getText(), sizeButton.getText(), taskTags.getText(), taskDescription.getText()));

        addNewTaskDialog.add(BorderLayout.SOUTH, addTaskButton);
        addNewTaskDialog.add(BorderLayout.NORTH, newTaskForm);
    }

    private void addTaskIntoDatabase(Dialog addNewTaskDialog, String taskName, String taskSize, String taskTags, String taskDescription) {
        java.util.List<String> taskTagsList = extractTagStrings(taskTags);
        Task newTask = new Task(taskName, taskDescription);
        newTask.setSize(taskSize);
        newTask.setTags(taskTagsList);

        String key = Task.OBJECT_ID;
        Database.write(key, newTask);

        addNewTaskDialog.dispose();

    }

    private List<String> extractTagStrings(String taskTags) {
        java.util.List<String> separatedTaskTags = new ArrayList<>();
        String[] separatedTaskTagsSplit = taskTags.split(" ");
        for (String tag : separatedTaskTagsSplit) {
            separatedTaskTags.add(tag);
        }
        return separatedTaskTags;
    }

    private void showSizePopup(String[] sizes, MultiButton sizeButton) {
        Dialog sizeDialog = new Dialog();
        sizeDialog.setLayout(BoxLayout.y());
        sizeDialog.getContentPane().setScrollableY(true);

        for (int i = 0; i < sizes.length; i++) {
            MultiButton oneSizeButton = new MultiButton(sizes[i]);
            sizeDialog.add(oneSizeButton);
            oneSizeButton.addActionListener(e->displaySelectedSize(sizeDialog, oneSizeButton, sizeButton));
        }
        sizeDialog.showPopupDialog(sizeButton);
    }

    private void displaySelectedSize(Dialog sizeDialog, MultiButton oneSizeButton, MultiButton sizeButton) {
        sizeButton.setText(oneSizeButton.getText());
        sizeDialog.dispose();
        sizeButton.revalidate();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
